library(tidyverse)
load("C:/Users/n-cegarcia/Downloads/Data_Merged_2022-2023.RData")
eastsidezip<-c(98004, 98006, 98007, 98008, 98011, 98028, 98033, 98034, 98039, 98040, 98052, 98056, 98059,
98072, 98075)
east<- data %>%
filter(zipcode %in% eastsidezip)
purposedata <- east %>%
# filter(region=="East") %>%
filter(wave>=20231) %>%
dplyr::select(uniqueid, wgt, starts_with("wish_purp")) %>%
dplyr::select(-c("wish_purp_other_txt"))
test<-survey_reshape(purposedata, not_pivot_cols = c("wgt", "uniqueid"), drop_na = TRUE)
View(test)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(data = test, depvar = "question", response="response",  )
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' automatically using predefined columns for the dependent variable, response,
#' and weights. It allows for additional grouping and provides an option for
#' verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weights.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, grouping_vars = NULL, verbose = FALSE) {
# Assuming 'depvar', 'response', and 'wgt' are fixed column names in 'data'
depvar <- "depvar"
response <- "response"
wgt <- "wgt"
# Validate input data
# This step could include checking for the existence of the fixed columns
if (!all(c(depvar, response, wgt) %in% names(data))) {
stop("Data must contain 'depvar', 'response', and 'wgt' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(.data[[depvar]]), !is.na(.data[[response]])) %>%
as_survey_design(ids = ~1, weights = .data[[wgt]])
# Grouping and summarizing data
dynamic_grouping <- c(depvar, response)
if (!is.null(grouping_vars)) {
dynamic_grouping <- c(dynamic_grouping, grouping_vars)
}
collapsed_data <- survey_design %>%
group_by(across(all_of(dynamic_grouping))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE)$mean, .groups = 'drop') %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
# Verbose output
if (verbose) {
message("Grouping by: ", paste(dynamic_grouping, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(data = test)
library(survey)
wishpurp_long_c <- survey_collapse(data = test)
library(srvyr)
library(tidyverse)
wishpurp_long_c <- survey_collapse(data = test)
survey_collapse <- function(data, grouping_vars = NULL, verbose = FALSE) {
wgt <- "wgt"  # Assuming 'wgt' column exists
# Check for required columns
if (!all(c("depvar", "response", wgt) %in% names(data))) {
stop("Data must contain 'depvar', 'response', and 'wgt' columns.")
}
# Prepare data for survey design without using formula shorthand for ids
survey_design <- data %>%
filter(!is.na(data[["depvar"]]), !is.na(data[["response"]])) %>%
as_survey_design(ids = rep(1, nrow(data)), weights = data[[wgt]])
dynamic_grouping <- c("depvar", "response")
if (!is.null(grouping_vars)) {
dynamic_grouping <- c(dynamic_grouping, grouping_vars)
}
collapsed_data <- survey_design %>%
group_by(across(all_of(dynamic_grouping))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE)$mean, .groups = 'drop') %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
if (verbose) {
message("Grouping by: ", paste(dynamic_grouping, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
wishpurp_long_c <- survey_collapse(data = test)
#' Collapse Survey Weights and Calculate Proportions
#'
#' @param data A dataframe containing survey data.
#' @param depvar Name of the dependent variable column.
#' @param response Name of the response variable column.
#' @param wgt Name of the weight variable column.
#' @param grouping_vars Vector of strings of columns used for additional grouping, NULL if no additional grouping is needed.
#' @param verbose Boolean indicating if detailed output should be printed.
#' @import dplyr
#' @import rlang
#' @import survey
#' @export
survey_collapse <- function(data, depvar, response, wgt, grouping_vars = NULL, verbose = FALSE) {
# Validate input data
required_cols <- c(depvar, response, wgt)
if (!is.null(grouping_vars)) {
required_cols <- c(required_cols, grouping_vars)
}
validate_df_cols(data, required_cols) # Assuming this is a custom function for column validation
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na({{depvar}}), !is.na({{response}})) %>%
as_survey_design(ids = 1, weights = {{wgt}})
# Grouping and summarizing data
group_by_cols <- if (!is.null(grouping_vars)) c(grouping_vars, depvar, response) else c(depvar, response)
collapsed_data <- survey_design %>%
group_by(across(all_of(group_by_cols))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE), .groups = 'drop') %>% # Ensure to drop grouping
filter({{response}} %in% c(100, 1)) %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
# Verbose output
if (verbose) {
message("Grouping by: ", paste(group_by_cols, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
test<-survey_reshape(purposedata, not_pivot_cols = c("wgt", "uniqueid"), drop_na = TRUE)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(data = test)
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' using predefined columns 'depvar' and 'response' for the dependent variable
#' and response variable, respectively. It allows for additional grouping
#' based on specified variables and provides an option for verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weight variable column.
#' @param wgt Name of the weight variable column in the data.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, wgt = "weight", grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, wgt, grouping_vars = NULL, verbose = FALSE) {
# Direct use of 'depvar' and 'response' column names
if (!all(c("depvar", "response", wgt) %in% names(data))) {
stop("Data must contain 'depvar', 'response', and '", wgt, "' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(data[["depvar"]]), !is.na(data[["response"]])) %>%
as_survey_design(ids = ~1, weights = data[[wgt]])
# Dynamic grouping including 'depvar' and 'response'
dynamic_grouping <- c("depvar", "response")
if (!is.null(grouping_vars)) {
dynamic_grouping <- c(dynamic_grouping, grouping_vars)
}
# Grouping and summarizing data
collapsed_data <- survey_design %>%
group_by(across(all_of(dynamic_grouping))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE)$mean, .groups = 'drop') %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
# Verbose output
if (verbose) {
message("Grouping by: ", paste(dynamic_grouping, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
test<-survey_reshape(purposedata, not_pivot_cols = c("wgt", "uniqueid"), drop_na = TRUE)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(data = test, wgt="wgt")
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
View(test)
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' using predefined columns 'depvar' and 'response' for the dependent variable
#' and response variable, respectively. It allows for additional grouping
#' based on specified variables and provides an option for verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weight variable column.
#' @param wgt Name of the weight variable column in the data.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @import survey
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, wgt = "weight", grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, wgt, grouping_vars = NULL, verbose = FALSE) {
# Direct use of 'depvar' and 'response' column names
if (!all(c("depvar", "response", wgt) %in% names(data))) {
stop("Data must contain 'depvar', 'response', and '", wgt, "' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(data[["depvar"]]), !is.na(data[["response"]])) %>%
as_survey_design(ids = ~1, weights = data[[wgt]])
# Dynamic grouping including 'depvar' and 'response'
dynamic_grouping <- c("depvar", "response")
if (!is.null(grouping_vars)) {
dynamic_grouping <- c(dynamic_grouping, grouping_vars)
}
# Grouping and summarizing data
collapsed_data <- survey_design %>%
group_by(across(all_of(dynamic_grouping))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE)$mean, .groups = 'drop') %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
# Verbose output
if (verbose) {
message("Grouping by: ", paste(dynamic_grouping, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' using predefined columns 'depvar' and 'response' for the dependent variable
#' and response variable, respectively. It allows for additional grouping
#' based on specified variables and provides an option for verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weight variable column.
#' @param wgt Name of the weight variable column in the data.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @import survey
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, wgt = "weight", grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, grouping_vars = NULL, verbose = FALSE) {
# Direct use of 'depvar' and 'response' column names
if (!all(c("depvar", "response", "wgt") %in% names(data))) {
stop("Data must contain 'depvar', 'response', and '", 'wgt', "' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(data{{"depvar"}}), !is.na(data{{"response"}})) %>%
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
library(dplyr)
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
rm(list=ls(all=TRUE))
library(survey)
library(srvyr)
library(tidyverse)
library(dplyr)
load("C:/Users/n-cegarcia/Downloads/Data_Merged_2022-2023.RData")
eastsidezip<-c(98004, 98006, 98007, 98008, 98011, 98028, 98033, 98034, 98039, 98040, 98052, 98056, 98059,
98072, 98075)
east<- data %>%
filter(zipcode %in% eastsidezip)
purposedata <- east %>%
# filter(region=="East") %>%
filter(wave>=20231) %>%
dplyr::select(uniqueid, wgt, starts_with("wish_purp")) %>%
dplyr::select(-c("wish_purp_other_txt"))
#' Reshape Survey Data
#'
#' This function reshapes a survey dataframe from wide to long format, allowing for
#' optional dropping of specified columns and NA values. Users can specify columns
#' to pivot, columns not to pivot, columns to drop, and whether to drop rows with NA
#' values in the pivoted columns.
#'
#' @param data A dataframe containing survey data.
#' @param pivot_cols Optional vector of string column names to pivot into longer format.
#'   If NULL and `not_pivot_cols` is specified, all columns not in `not_pivot_cols` will be pivoted.
#' @param not_pivot_cols Optional vector of string column names not to pivot into longer format.
#'   If specified, `pivot_cols` should be NULL.
#' @param drop_cols Optional vector of string column names to be dropped from `data` before reshaping.
#' @param drop_na Logical; if TRUE, rows with NA values in the `response` column after pivoting will be dropped.
#' @import dplyr
#' @import tidyr
#' @return A long format dataframe with specified or inferred pivoted columns, optionally excluding specified columns
#'   and/or rows with NA values.
#' @export
survey_reshape <- function(data, pivot_cols = NULL, not_pivot_cols = NULL, drop_cols = NULL, drop_na = FALSE) {
# Validate parameters
if (!is.null(pivot_cols) && !is.null(not_pivot_cols)) {
stop("Specify either pivot_cols or not_pivot_cols, not both.")
}
if (is.null(pivot_cols) && is.null(not_pivot_cols)) {
stop("At least one of pivot_cols or not_pivot_cols must be provided.")
}
if (!is.null(drop_cols)) {
if (!all(drop_cols %in% names(data))) {
stop("All drop_cols must be column names in data.")
}
# Drop specified columns
data <- select(data, -all_of(drop_cols))
}
cols_to_pivot <- if (!is.null(not_pivot_cols)) {
setdiff(names(data), not_pivot_cols)
} else {
pivot_cols
}
# Reshape the data
data_long <- data %>%
pivot_longer(cols = all_of(cols_to_pivot), names_to = "depvar", values_to = "response") %>%
as.data.frame()
if (drop_na) {
# Drop rows with NA in 'response' after reshaping
data_long <- data_long %>% filter(!is.na(response))
}
return(data_long)
}
test<-survey_reshape(purposedata, not_pivot_cols = c("wgt", "uniqueid"), drop_na = TRUE)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' using predefined columns 'depvar' and 'response' for the dependent variable
#' and response variable, respectively. It allows for additional grouping
#' based on specified variables and provides an option for verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weight variable column.
#' @param wgt Name of the weight variable column in the data.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @import survey
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, wgt = "weight", grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, grouping_vars = NULL, verbose = FALSE) {
# Direct use of 'depvar' and 'response' column names
if (!all(c("depvar", "response", "wgt") %in% names(data))) {
stop("Data must contain 'depvar', 'response', and '", 'wgt', "' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(data{{"depvar"}}), !is.na(data{{"response"}})) %>%
#' Collapse Survey Weights and Calculate Proportions
#'
#' This function calculates the weighted proportions for survey data,
#' using predefined columns 'depvar' and 'response' for the dependent variable
#' and response variable, respectively. It allows for additional grouping
#' based on specified variables and provides an option for verbose output.
#'
#' @param data A dataframe containing survey data with predefined columns:
#'   'depvar' for the dependent variable, 'response' for the response variable,
#'   and 'wgt' for the weight variable column.
#' @param wgt Name of the weight variable column in the data.
#' @param grouping_vars Optional vector of strings for columns used for additional
#'   grouping. If NULL (default), no additional grouping is performed.
#' @param verbose Boolean indicating if detailed output should be printed.
#'   If TRUE, prints the groups being analyzed and the number of groups calculated.
#' @importFrom dplyr filter group_by summarize mutate ungroup
#' @importFrom srvyr as_survey_design survey_mean
#' @import survey as_survey_design
#' @return A dataframe with groups (if any), their response proportions, and labels.
#' @examples
#' survey_collapse(data = survey_data, wgt = "weight", grouping_vars = c("gender", "age"), verbose = TRUE)
#' @export
survey_collapse <- function(data, grouping_vars = NULL, verbose = FALSE) {
# Direct use of 'depvar' and 'response' column names
if (!all(c("depvar", "response", "wgt") %in% names(data))) {
stop("Data must contain 'depvar', 'response', and '", , "' columns.")
}
# Preparing data for survey design
survey_design <- data %>%
filter(!is.na(data[["depvar"]]), !is.na(data[["response"]])) %>%
as_survey_design(ids = ~1, weights = data[[wgt]])
# Dynamic grouping including 'depvar' and 'response'
dynamic_grouping <- c("depvar", "response")
if (!is.null(grouping_vars)) {
dynamic_grouping <- c(dynamic_grouping, grouping_vars)
}
# Grouping and summarizing data
collapsed_data <- survey_design %>%
group_by(across(all_of(dynamic_grouping))) %>%
summarize(prop = 100 * survey_mean(na.rm = TRUE)$mean, .groups = 'drop') %>%
mutate(proplabel = paste0(round(prop, 1), "%")) %>%
ungroup() %>%
as.data.frame()
# Verbose output
if (verbose) {
message("Grouping by: ", paste(dynamic_grouping, collapse = ", "))
message("Calculated proportions for ", nrow(collapsed_data), " groups.")
}
return(collapsed_data)
}
test<-survey_reshape(purposedata, not_pivot_cols = c("wgt", "uniqueid"), drop_na = TRUE)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(test, wgt="wgt")
wishpurp_long_c <- survey_collapse(test)
purpose = c(
"wish_purp_work" = "Work",
"wish_purp_school" = "School",
"wish_purp_childcare" = "Childcare",
"wish_purp_shopping" = "Shopping",
"wish_purp_fun" = "Fun, social, recreation",
"wish_purp_special" = "Special events",
"wish_purp_airport" = "Airport",
"wish_purp_medical" = "Medical",
"wish_purp_social" = "Social services",
"wish_purp_judicial" = "Judicial services"
)
wishpurp_long_c <- survey_collapse(test)
rlang::last_trace()
